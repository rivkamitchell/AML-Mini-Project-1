import numpy as np
import math
import Preprocessing

class LOGREG:

    def __init__(self, X, iterations, epsilon, learning_rate):
        X=np.array(X)
        X=np.insert(X, 0,  np.ones(len(X)), axis=1)
        self.data = X
        (self.num_exp, self.num_features)=X.shape
        self.features = X[:,:len(X[0])-1]
        self.classify = X[:,len(X[0])-1]
        self.iterations = iterations
        self.learning_rate=learning_rate
        self.epsilon=epsilon
        self.weights = self.fit()
        self.validation=X




    def linear_logistic(self, w, x):                    # sigmoid function
        exp = np.exp(-np.dot(x,w))
        return (1/(1+exp))

    def error_deriv(self, w):
        error = np.zeros(len(self.features[0]))
        for i in range(len(self.features)):
            error += self.features[i]*(self.classify[i] - self.linear_logistic(w, self.features[i]))
        return error

    def fit(self):
        w = np.ones(len(self.features[0]))
        for k in range(self.iterations):
            error=self.learning_rate(k)*self.error_deriv(w)
            w += error
            print(np.sqrt(np.dot(error, error)))
            if np.sqrt(np.dot(error, error))<self.epsilon:
                return w
        return w
    
    def predict(self,x):
        if self.linear_logistic(self.weights, x) > 0.5: return 1
        return 0

    def accuracy(self, vali):
        tr = 0 #number of right predictions
        tw = 0 #number of wrong predictions
        self.validation=vali

        for i in range(len(self.validation)):
            if self.classify[i]==self.predict(self.features[i]) :tr+=1
            else: tw+=1
        return (tr/(tw+tr))

    def k_fold_crossing(self, k):
        #assuming k divides the number of experiments. But should b fine otherwise
        size=int(self.num_exp/k)
        acc=0
        for i in range(k):
            temp1=i*size
            temp2=(i+1)*size
            train=np.vstack((self.data[:temp1], self.data[temp2:]))
            vali=self.data[temp1:temp2]
            model=LOGREG(train, self.iterations)
            acc+=model.accuracy(vali)
        return (acc/k)
        

        
